" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"   Customizations on top of spf13 vim
" }

" Formatting {
    " Long line wrapping rulez, add it back
    set wrap
    set showbreak=â†ª

    " tabstob should be 8 generally because it is the assumed default
    set ts=8

    " Less identation for the following file types
    autocmd FileType xml,htmlcheetah,tex,markdown,docbk,xsd,xslt setlocal shiftwidth=2 softtabstop=2
    " Force md files to be recognized as markdown instead of modula files
    au BufRead,BufNewFile *.md set filetype=markdown
" }

" Diffing {
    " Wrapping also for diffs (copies the wrap setting)
    autocmd FilterWritePre * if &diff | setlocal wrap< | endif

    " Ignore whitespaces and tab differences when diffing and use vertical splits
    set diffopt+=iwhite,vertical
    " options are:
    " -w : ignore all white space
    " -B : ignore changes whose lines are all blank
    " --strip-trailing-cr : strip trailing carriage return on input
    " -d : try hard to find a smaller set of changes
    set diffexpr=MyDiff()
    " Empower iwhite option to ignore all white space and blank lines
    function MyDiff()
        let opt = ""
        if &diffopt =~ "icase"
            let opt = opt . "-i "
        endif
        if &diffopt =~ "iwhite"
            let opt = opt . "-w -B "
        endif
        silent execute "!diff -a --binary " . opt . v:fname_in . " " . v:fname_new .
                    \  " > " . v:fname_out
    endfunction
" }

" Vim UI {

    "highlight column 80
    set colorcolumn=80

    " Ruler color fix
    set background=dark

    if has('gui_running')
        " Use Inconsolata font in gvim. In vim is the term font
        set guifont=Inconsolata\ 12
    endif

    " Indent Guides colors
    if isdirectory(expand("~/.vim/bundle/vim-indent-guides/"))
        let g:indent_guides_auto_colors = 0
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#586e75 ctermbg=240
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#586e75 ctermbg=240
    endif
" }

" Bundles config {
    " pylint: trailing spaces are already notified by vim
    if isdirectory(expand("~/.vim/bundle/python-mode/"))
        let g:pymode_lint_ignore = "C0303,E501"
    endif

    " Airline stuff. note that:
        "" Enable powerline symbols
        "let g:airline_powerline_fonts = 1
    " Is already set in .vimrc.before.fork
    if isdirectory(expand("~/.vim/bundle/vim-airline/"))
        set noshowmode
        " display buffers list
        let g:airline#extensions#tabline#enabled = 1
        " Do not use the hunks (+0 ~0 -0 stuff in the branch indicator)
        let g:airline#extensions#hunks#enabled = 0
        " Use hair space to separate ariline symbols to avoid garbage in gvim
        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif
        let g:airline_symbols.space = "\ua0"
    endif
" }

" Key (re)Mappings {
    " nerdtree fix mapping to a toggle
    if isdirectory(expand("~/.vim/bundle/nerdtree/"))
        nnoremap <silent> <leader>ee :NERDTreeToggle<CR>
    endif

    " unite
    if isdirectory(expand("~/.vim/bundle/unite.vim/"))
        " use same keybindings as ctrl-p and buffergator
        nnoremap <silent> <c-p> :Unite -start-insert file<CR>
        nnoremap <silent> <leader>bb :Unite buffer<CR>
    endif

    " disable arrows, insert, delete, home, end, pgup and pgdown keys
    inoremap <Up> <NOP>
    noremap <Up> <NOP>
    inoremap <Down> <NOP>
    noremap <Down> <NOP>
    inoremap <Left> <NOP>
    noremap <Left> <NOP>
    inoremap <Right> <NOP>
    noremap <Right> <NOP>
    inoremap <PageUp> <NOP>
    noremap <PageUp> <NOP>
    inoremap <PageDown> <NOP>
    noremap <PageDown> <NOP>
    inoremap <Insert> <NOP>
    noremap <Insert> <NOP>
    inoremap <Del> <NOP>
    noremap <Del> <NOP>
" }

